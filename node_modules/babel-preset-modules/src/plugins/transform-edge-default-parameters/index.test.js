import { babel } from '../../../test/_util';
import plugin from '.';

const CONFIG = {
	plugins: [
		plugin
	]
};

describe('transform-edge-default-parameters', () => {
	it('should un-shorthand destructured parameters with default values', () => {
		expect(babel(`({a=1})=>a;`, CONFIG)).toEqual(`({a:_a=1})=>_a;`);
	});

	it('should un-shorthand nested destructured parameters with default values', () => {
		expect(babel(`({a:{b=1}})=>[a,b];`, CONFIG)).toEqual(`({a:{b:_b=1}})=>[a,_b];`);
	});

	it('should not create colliding local names', () => {
		expect(babel(`({a:{b=1}},_b)=>[b,_b];`, CONFIG)).toEqual(`({a:{b:_b2=1}},_b)=>[_b2,_b];`);
	});

	it('should ignore destructured parameters without default values', () => {
		expect(babel(`({a})=>a;`, CONFIG)).toEqual(`({a})=>a;`);
	});

	it('should ignore default parameter values', () => {
		expect(babel(`(a=1)=>a;`, CONFIG)).toEqual(`(a=1)=>a;`);
	});

	it('should ignore non-argument destructured assignment', () => {
		expect(babel(`()=>{const{a=1}={};};`, CONFIG)).toEqual(`()=>{const{a=1}={};};`);
	});
});