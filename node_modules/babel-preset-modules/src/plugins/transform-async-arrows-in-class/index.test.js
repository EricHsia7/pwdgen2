import { babel, dent } from '../../../test/_util';
import plugin from '.';

// const trim = s => s.join('\n').trim().replace(/^\s+/gm, '');

const CONFIG = {
	compact: false,
	plugins: [
		plugin
	]
};

describe('transform-async-arrows-in-class', () => {
	it('should ignore non-async arrows', () => {
		expect(babel(dent`
			class Foo {
				constructor() {
					this.x = () => {};
				}
			}
		`, CONFIG)).toEqual(dent`
			class Foo {
				constructor() {
					this.x = () => {};
				}
			}
		`);
	});

	it('should turn async arrows into async functions', () => {
		expect(babel(dent`
			class Foo {
				constructor() {
					this.x = async () => await 1;
				}
				bar() {
					(async () => {})();
				}
			}
		`, CONFIG)).toEqual(dent`
			class Foo {
				constructor() {
					this.x = async function () {
						return await 1;
					};
				}
				bar() {
					(async function () {})();
				}
			}
		`);
	});

	it('should turn transform `this` and `arguments` references', () => {
		expect(babel(dent`
			class Foo {
				constructor() {
					this.x = async () => await this;
				}
			}
		`, CONFIG)).toEqual(dent`
			class Foo {
				constructor() {
					var _this = this;
					this.x = async function () {
						return await _this;
					};
				}
			}
		`);

		expect(babel(dent`
			class Foo {
				foo() {
					bar(async () => await 1);
				}
			}
		`, CONFIG)).toEqual(dent`
			class Foo {
				foo() {
					bar(async function () {
						return await 1;
					});
				}
			}
		`);
	});

	it('should turn transform `arguments` references', () => {
		expect(babel(dent`
			class Foo {
				constructor() {
					this.x = async () => await arguments[0];
				}
			}
		`, CONFIG)).toEqual(dent`
			class Foo {
				constructor() {
					var _arguments = arguments;
					this.x = async function () {
						return await _arguments[0];
					};
				}
			}
		`);
	});


	it('should turn transform nested async arrows', () => {
		expect(babel(dent`
			class Foo {
				constructor() {
					this.x = () => async () => await this;
				}
			}
		`, CONFIG)).toEqual(dent`
			class Foo {
				constructor() {
					var _this = this;
					this.x = () => async function () {
						return await _this;
					};
				}
			}
		`);
	});
});
