import { babel, dent } from '../../../test/_util';
import plugin from '.';

const CONFIG = {
	plugins: [
		plugin
	]
};

describe('transform-edge-function-name', () => {
	it('should rename function to inferred name', () => {
		expect(babel(dent`
			const foo=function(){};
		`, CONFIG)).toEqual(dent`
			const foo=function foo(){};
		`);
	});

	it('should prefer explicit names over inferred', () => {
		expect(babel(dent`
			const foo=function bar(){};
		`, CONFIG)).toEqual(dent`
			const foo=function bar(){};
		`);
	});

	it('should not modify arrow functions', () => {
		expect(babel(dent`
			const foo=()=>{};
		`, CONFIG)).toEqual(dent`
			const foo=()=>{};
		`);
	});

	it('should not shadow scoped bindings when they are reassigned', () => {
		expect(babel(dent`
			const a=function(){a;};
		`, CONFIG)).toEqual(dent`
			const a=function a(){a;};
		`);

		expect(babel(dent`
			const a=function(){a=1;};
		`, CONFIG)).toEqual(dent`
			const _a=function a(){_a=1;};
		`);

		expect(babel(dent`
			const a=function(){a;};a=1;
		`, CONFIG)).toEqual(dent`
			const _a=function a(){_a;};_a=1;
		`);

		expect(babel(dent`
			const a=function(){return function(){return()=>{a=1;};};};
		`, CONFIG)).toEqual(dent`
			const _a=function a(){return function(){return()=>{_a=1;};};};
		`);

		expect(babel(dent`
			const a=function(){a;};()=>{a=1;};
		`, CONFIG)).toEqual(dent`
			const _a=function a(){_a;};()=>{_a=1;};
		`);
	});
});
