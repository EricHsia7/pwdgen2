{"version":3,"file":"667.e16b329b82c09bc5a65b.min.js","mappings":"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","sources":["webpack://pwdgen2/./node_modules/stacktrace-gps/node_modules/source-map/lib/source-map-consumer.js"],"sourcesContent":["/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\n\nvar util = require('./util');\nvar binarySearch = require('./binary-search');\nvar ArraySet = require('./array-set').ArraySet;\nvar base64VLQ = require('./base64-vlq');\nvar quickSort = require('./quick-sort').quickSort;\n\nfunction SourceMapConsumer(aSourceMap) {\n  var sourceMap = aSourceMap;\n  if (typeof aSourceMap === 'string') {\n    sourceMap = JSON.parse(aSourceMap.replace(/^\\)\\]\\}'/, ''));\n  }\n\n  return sourceMap.sections != null\n    ? new IndexedSourceMapConsumer(sourceMap)\n    : new BasicSourceMapConsumer(sourceMap);\n}\n\nSourceMapConsumer.fromSourceMap = function(aSourceMap) {\n  return BasicSourceMapConsumer.fromSourceMap(aSourceMap);\n}\n\n/**\n * The version of the source mapping spec that we are consuming.\n */\nSourceMapConsumer.prototype._version = 3;\n\n// `__generatedMappings` and `__originalMappings` are arrays that hold the\n// parsed mapping coordinates from the source map's \"mappings\" attribute. They\n// are lazily instantiated, accessed via the `_generatedMappings` and\n// `_originalMappings` getters respectively, and we only parse the mappings\n// and create these arrays once queried for a source location. We jump through\n// these hoops because there can be many thousands of mappings, and parsing\n// them is expensive, so we only want to do it if we must.\n//\n// Each object in the arrays is of the form:\n//\n//     {\n//       generatedLine: The line number in the generated code,\n//       generatedColumn: The column number in the generated code,\n//       source: The path to the original source file that generated this\n//               chunk of code,\n//       originalLine: The line number in the original source that\n//                     corresponds to this chunk of generated code,\n//       originalColumn: The column number in the original source that\n//                       corresponds to this chunk of generated code,\n//       name: The name of the original symbol which generated this chunk of\n//             code.\n//     }\n//\n// All properties except for `generatedLine` and `generatedColumn` can be\n// `null`.\n//\n// `_generatedMappings` is ordered by the generated positions.\n//\n// `_originalMappings` is ordered by the original positions.\n\nSourceMapConsumer.prototype.__generatedMappings = null;\nObject.defineProperty(SourceMapConsumer.prototype, '_generatedMappings', {\n  get: function () {\n    if (!this.__generatedMappings) {\n      this._parseMappings(this._mappings, this.sourceRoot);\n    }\n\n    return this.__generatedMappings;\n  }\n});\n\nSourceMapConsumer.prototype.__originalMappings = null;\nObject.defineProperty(SourceMapConsumer.prototype, '_originalMappings', {\n  get: function () {\n    if (!this.__originalMappings) {\n      this._parseMappings(this._mappings, this.sourceRoot);\n    }\n\n    return this.__originalMappings;\n  }\n});\n\nSourceMapConsumer.prototype._charIsMappingSeparator =\n  function SourceMapConsumer_charIsMappingSeparator(aStr, index) {\n    var c = aStr.charAt(index);\n    return c === \";\" || c === \",\";\n  };\n\n/**\n * Parse the mappings in a string in to a data structure which we can easily\n * query (the ordered arrays in the `this.__generatedMappings` and\n * `this.__originalMappings` properties).\n */\nSourceMapConsumer.prototype._parseMappings =\n  function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {\n    throw new Error(\"Subclasses must implement _parseMappings\");\n  };\n\nSourceMapConsumer.GENERATED_ORDER = 1;\nSourceMapConsumer.ORIGINAL_ORDER = 2;\n\nSourceMapConsumer.GREATEST_LOWER_BOUND = 1;\nSourceMapConsumer.LEAST_UPPER_BOUND = 2;\n\n/**\n * Iterate over each mapping between an original source/line/column and a\n * generated line/column in this source map.\n *\n * @param Function aCallback\n *        The function that is called with each mapping.\n * @param Object aContext\n *        Optional. If specified, this object will be the value of `this` every\n *        time that `aCallback` is called.\n * @param aOrder\n *        Either `SourceMapConsumer.GENERATED_ORDER` or\n *        `SourceMapConsumer.ORIGINAL_ORDER`. Specifies whether you want to\n *        iterate over the mappings sorted by the generated file's line/column\n *        order or the original's source/line/column order, respectively. Defaults to\n *        `SourceMapConsumer.GENERATED_ORDER`.\n */\nSourceMapConsumer.prototype.eachMapping =\n  function SourceMapConsumer_eachMapping(aCallback, aContext, aOrder) {\n    var context = aContext || null;\n    var order = aOrder || SourceMapConsumer.GENERATED_ORDER;\n\n    var mappings;\n    switch (order) {\n    case SourceMapConsumer.GENERATED_ORDER:\n      mappings = this._generatedMappings;\n      break;\n    case SourceMapConsumer.ORIGINAL_ORDER:\n      mappings = this._originalMappings;\n      break;\n    default:\n      throw new Error(\"Unknown order of iteration.\");\n    }\n\n    var sourceRoot = this.sourceRoot;\n    mappings.map(function (mapping) {\n      var source = mapping.source === null ? null : this._sources.at(mapping.source);\n      if (source != null && sourceRoot != null) {\n        source = util.join(sourceRoot, source);\n      }\n      return {\n        source: source,\n        generatedLine: mapping.generatedLine,\n        generatedColumn: mapping.generatedColumn,\n        originalLine: mapping.originalLine,\n        originalColumn: mapping.originalColumn,\n        name: mapping.name === null ? null : this._names.at(mapping.name)\n      };\n    }, this).forEach(aCallback, context);\n  };\n\n/**\n * Returns all generated line and column information for the original source,\n * line, and column provided. If no column is provided, returns all mappings\n * corresponding to a either the line we are searching for or the next\n * closest line that has any mappings. Otherwise, returns all mappings\n * corresponding to the given line and either the column we are searching for\n * or the next closest column that has any offsets.\n *\n * The only argument is an object with the following properties:\n *\n *   - source: The filename of the original source.\n *   - line: The line number in the original source.\n *   - column: Optional. the column number in the original source.\n *\n * and an array of objects is returned, each with the following properties:\n *\n *   - line: The line number in the generated source, or null.\n *   - column: The column number in the generated source, or null.\n */\nSourceMapConsumer.prototype.allGeneratedPositionsFor =\n  function SourceMapConsumer_allGeneratedPositionsFor(aArgs) {\n    var line = util.getArg(aArgs, 'line');\n\n    // When there is no exact match, BasicSourceMapConsumer.prototype._findMapping\n    // returns the index of the closest mapping less than the needle. By\n    // setting needle.originalColumn to 0, we thus find the last mapping for\n    // the given line, provided such a mapping exists.\n    var needle = {\n      source: util.getArg(aArgs, 'source'),\n      originalLine: line,\n      originalColumn: util.getArg(aArgs, 'column', 0)\n    };\n\n    if (this.sourceRoot != null) {\n      needle.source = util.relative(this.sourceRoot, needle.source);\n    }\n    if (!this._sources.has(needle.source)) {\n      return [];\n    }\n    needle.source = this._sources.indexOf(needle.source);\n\n    var mappings = [];\n\n    var index = this._findMapping(needle,\n                                  this._originalMappings,\n                                  \"originalLine\",\n                                  \"originalColumn\",\n                                  util.compareByOriginalPositions,\n                                  binarySearch.LEAST_UPPER_BOUND);\n    if (index >= 0) {\n      var mapping = this._originalMappings[index];\n\n      if (aArgs.column === undefined) {\n        var originalLine = mapping.originalLine;\n\n        // Iterate until either we run out of mappings, or we run into\n        // a mapping for a different line than the one we found. Since\n        // mappings are sorted, this is guaranteed to find all mappings for\n        // the line we found.\n        while (mapping && mapping.originalLine === originalLine) {\n          mappings.push({\n            line: util.getArg(mapping, 'generatedLine', null),\n            column: util.getArg(mapping, 'generatedColumn', null),\n            lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)\n          });\n\n          mapping = this._originalMappings[++index];\n        }\n      } else {\n        var originalColumn = mapping.originalColumn;\n\n        // Iterate until either we run out of mappings, or we run into\n        // a mapping for a different line than the one we were searching for.\n        // Since mappings are sorted, this is guaranteed to find all mappings for\n        // the line we are searching for.\n        while (mapping &&\n               mapping.originalLine === line &&\n               mapping.originalColumn == originalColumn) {\n          mappings.push({\n            line: util.getArg(mapping, 'generatedLine', null),\n            column: util.getArg(mapping, 'generatedColumn', null),\n            lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)\n          });\n\n          mapping = this._originalMappings[++index];\n        }\n      }\n    }\n\n    return mappings;\n  };\n\nexports.SourceMapConsumer = SourceMapConsumer;\n\n/**\n * A BasicSourceMapConsumer instance represents a parsed source map which we can\n * query for information about the original file positions by giving it a file\n * position in the generated source.\n *\n * The only parameter is the raw source map (either as a JSON string, or\n * already parsed to an object). According to the spec, source maps have the\n * following attributes:\n *\n *   - version: Which version of the source map spec this map is following.\n *   - sources: An array of URLs to the original source files.\n *   - names: An array of identifiers which can be referrenced by individual mappings.\n *   - sourceRoot: Optional. The URL root from which all sources are relative.\n *   - sourcesContent: Optional. An array of contents of the original source files.\n *   - mappings: A string of base64 VLQs which contain the actual mappings.\n *   - file: Optional. The generated file this source map is associated with.\n *\n * Here is an example source map, taken from the source map spec[0]:\n *\n *     {\n *       version : 3,\n *       file: \"out.js\",\n *       sourceRoot : \"\",\n *       sources: [\"foo.js\", \"bar.js\"],\n *       names: [\"src\", \"maps\", \"are\", \"fun\"],\n *       mappings: \"AA,AB;;ABCDE;\"\n *     }\n *\n * [0]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit?pli=1#\n */\nfunction BasicSourceMapConsumer(aSourceMap) {\n  var sourceMap = aSourceMap;\n  if (typeof aSourceMap === 'string') {\n    sourceMap = JSON.parse(aSourceMap.replace(/^\\)\\]\\}'/, ''));\n  }\n\n  var version = util.getArg(sourceMap, 'version');\n  var sources = util.getArg(sourceMap, 'sources');\n  // Sass 3.3 leaves out the 'names' array, so we deviate from the spec (which\n  // requires the array) to play nice here.\n  var names = util.getArg(sourceMap, 'names', []);\n  var sourceRoot = util.getArg(sourceMap, 'sourceRoot', null);\n  var sourcesContent = util.getArg(sourceMap, 'sourcesContent', null);\n  var mappings = util.getArg(sourceMap, 'mappings');\n  var file = util.getArg(sourceMap, 'file', null);\n\n  // Once again, Sass deviates from the spec and supplies the version as a\n  // string rather than a number, so we use loose equality checking here.\n  if (version != this._version) {\n    throw new Error('Unsupported version: ' + version);\n  }\n\n  sources = sources\n    .map(String)\n    // Some source maps produce relative source paths like \"./foo.js\" instead of\n    // \"foo.js\".  Normalize these first so that future comparisons will succeed.\n    // See bugzil.la/1090768.\n    .map(util.normalize)\n    // Always ensure that absolute sources are internally stored relative to\n    // the source root, if the source root is absolute. Not doing this would\n    // be particularly problematic when the source root is a prefix of the\n    // source (valid, but why??). See github issue #199 and bugzil.la/1188982.\n    .map(function (source) {\n      return sourceRoot && util.isAbsolute(sourceRoot) && util.isAbsolute(source)\n        ? util.relative(sourceRoot, source)\n        : source;\n    });\n\n  // Pass `true` below to allow duplicate names and sources. While source maps\n  // are intended to be compressed and deduplicated, the TypeScript compiler\n  // sometimes generates source maps with duplicates in them. See Github issue\n  // #72 and bugzil.la/889492.\n  this._names = ArraySet.fromArray(names.map(String), true);\n  this._sources = ArraySet.fromArray(sources, true);\n\n  this.sourceRoot = sourceRoot;\n  this.sourcesContent = sourcesContent;\n  this._mappings = mappings;\n  this.file = file;\n}\n\nBasicSourceMapConsumer.prototype = Object.create(SourceMapConsumer.prototype);\nBasicSourceMapConsumer.prototype.consumer = SourceMapConsumer;\n\n/**\n * Create a BasicSourceMapConsumer from a SourceMapGenerator.\n *\n * @param SourceMapGenerator aSourceMap\n *        The source map that will be consumed.\n * @returns BasicSourceMapConsumer\n */\nBasicSourceMapConsumer.fromSourceMap =\n  function SourceMapConsumer_fromSourceMap(aSourceMap) {\n    var smc = Object.create(BasicSourceMapConsumer.prototype);\n\n    var names = smc._names = ArraySet.fromArray(aSourceMap._names.toArray(), true);\n    var sources = smc._sources = ArraySet.fromArray(aSourceMap._sources.toArray(), true);\n    smc.sourceRoot = aSourceMap._sourceRoot;\n    smc.sourcesContent = aSourceMap._generateSourcesContent(smc._sources.toArray(),\n                                                            smc.sourceRoot);\n    smc.file = aSourceMap._file;\n\n    // Because we are modifying the entries (by converting string sources and\n    // names to indices into the sources and names ArraySets), we have to make\n    // a copy of the entry or else bad things happen. Shared mutable state\n    // strikes again! See github issue #191.\n\n    var generatedMappings = aSourceMap._mappings.toArray().slice();\n    var destGeneratedMappings = smc.__generatedMappings = [];\n    var destOriginalMappings = smc.__originalMappings = [];\n\n    for (var i = 0, length = generatedMappings.length; i < length; i++) {\n      var srcMapping = generatedMappings[i];\n      var destMapping = new Mapping;\n      destMapping.generatedLine = srcMapping.generatedLine;\n      destMapping.generatedColumn = srcMapping.generatedColumn;\n\n      if (srcMapping.source) {\n        destMapping.source = sources.indexOf(srcMapping.source);\n        destMapping.originalLine = srcMapping.originalLine;\n        destMapping.originalColumn = srcMapping.originalColumn;\n\n        if (srcMapping.name) {\n          destMapping.name = names.indexOf(srcMapping.name);\n        }\n\n        destOriginalMappings.push(destMapping);\n      }\n\n      destGeneratedMappings.push(destMapping);\n    }\n\n    quickSort(smc.__originalMappings, util.compareByOriginalPositions);\n\n    return smc;\n  };\n\n/**\n * The version of the source mapping spec that we are consuming.\n */\nBasicSourceMapConsumer.prototype._version = 3;\n\n/**\n * The list of original sources.\n */\nObject.defineProperty(BasicSourceMapConsumer.prototype, 'sources', {\n  get: function () {\n    return this._sources.toArray().map(function (s) {\n      return this.sourceRoot != null ? util.join(this.sourceRoot, s) : s;\n    }, this);\n  }\n});\n\n/**\n * Provide the JIT with a nice shape / hidden class.\n */\nfunction Mapping() {\n  this.generatedLine = 0;\n  this.generatedColumn = 0;\n  this.source = null;\n  this.originalLine = null;\n  this.originalColumn = null;\n  this.name = null;\n}\n\n/**\n * Parse the mappings in a string in to a data structure which we can easily\n * query (the ordered arrays in the `this.__generatedMappings` and\n * `this.__originalMappings` properties).\n */\nBasicSourceMapConsumer.prototype._parseMappings =\n  function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {\n    var generatedLine = 1;\n    var previousGeneratedColumn = 0;\n    var previousOriginalLine = 0;\n    var previousOriginalColumn = 0;\n    var previousSource = 0;\n    var previousName = 0;\n    var length = aStr.length;\n    var index = 0;\n    var cachedSegments = {};\n    var temp = {};\n    var originalMappings = [];\n    var generatedMappings = [];\n    var mapping, str, segment, end, value;\n\n    while (index < length) {\n      if (aStr.charAt(index) === ';') {\n        generatedLine++;\n        index++;\n        previousGeneratedColumn = 0;\n      }\n      else if (aStr.charAt(index) === ',') {\n        index++;\n      }\n      else {\n        mapping = new Mapping();\n        mapping.generatedLine = generatedLine;\n\n        // Because each offset is encoded relative to the previous one,\n        // many segments often have the same encoding. We can exploit this\n        // fact by caching the parsed variable length fields of each segment,\n        // allowing us to avoid a second parse if we encounter the same\n        // segment again.\n        for (end = index; end < length; end++) {\n          if (this._charIsMappingSeparator(aStr, end)) {\n            break;\n          }\n        }\n        str = aStr.slice(index, end);\n\n        segment = cachedSegments[str];\n        if (segment) {\n          index += str.length;\n        } else {\n          segment = [];\n          while (index < end) {\n            base64VLQ.decode(aStr, index, temp);\n            value = temp.value;\n            index = temp.rest;\n            segment.push(value);\n          }\n\n          if (segment.length === 2) {\n            throw new Error('Found a source, but no line and column');\n          }\n\n          if (segment.length === 3) {\n            throw new Error('Found a source and line, but no column');\n          }\n\n          cachedSegments[str] = segment;\n        }\n\n        // Generated column.\n        mapping.generatedColumn = previousGeneratedColumn + segment[0];\n        previousGeneratedColumn = mapping.generatedColumn;\n\n        if (segment.length > 1) {\n          // Original source.\n          mapping.source = previousSource + segment[1];\n          previousSource += segment[1];\n\n          // Original line.\n          mapping.originalLine = previousOriginalLine + segment[2];\n          previousOriginalLine = mapping.originalLine;\n          // Lines are stored 0-based\n          mapping.originalLine += 1;\n\n          // Original column.\n          mapping.originalColumn = previousOriginalColumn + segment[3];\n          previousOriginalColumn = mapping.originalColumn;\n\n          if (segment.length > 4) {\n            // Original name.\n            mapping.name = previousName + segment[4];\n            previousName += segment[4];\n          }\n        }\n\n        generatedMappings.push(mapping);\n        if (typeof mapping.originalLine === 'number') {\n          originalMappings.push(mapping);\n        }\n      }\n    }\n\n    quickSort(generatedMappings, util.compareByGeneratedPositionsDeflated);\n    this.__generatedMappings = generatedMappings;\n\n    quickSort(originalMappings, util.compareByOriginalPositions);\n    this.__originalMappings = originalMappings;\n  };\n\n/**\n * Find the mapping that best matches the hypothetical \"needle\" mapping that\n * we are searching for in the given \"haystack\" of mappings.\n */\nBasicSourceMapConsumer.prototype._findMapping =\n  function SourceMapConsumer_findMapping(aNeedle, aMappings, aLineName,\n                                         aColumnName, aComparator, aBias) {\n    // To return the position we are searching for, we must first find the\n    // mapping for the given position and then return the opposite position it\n    // points to. Because the mappings are sorted, we can use binary search to\n    // find the best mapping.\n\n    if (aNeedle[aLineName] <= 0) {\n      throw new TypeError('Line must be greater than or equal to 1, got '\n                          + aNeedle[aLineName]);\n    }\n    if (aNeedle[aColumnName] < 0) {\n      throw new TypeError('Column must be greater than or equal to 0, got '\n                          + aNeedle[aColumnName]);\n    }\n\n    return binarySearch.search(aNeedle, aMappings, aComparator, aBias);\n  };\n\n/**\n * Compute the last column for each generated mapping. The last column is\n * inclusive.\n */\nBasicSourceMapConsumer.prototype.computeColumnSpans =\n  function SourceMapConsumer_computeColumnSpans() {\n    for (var index = 0; index < this._generatedMappings.length; ++index) {\n      var mapping = this._generatedMappings[index];\n\n      // Mappings do not contain a field for the last generated columnt. We\n      // can come up with an optimistic estimate, however, by assuming that\n      // mappings are contiguous (i.e. given two consecutive mappings, the\n      // first mapping ends where the second one starts).\n      if (index + 1 < this._generatedMappings.length) {\n        var nextMapping = this._generatedMappings[index + 1];\n\n        if (mapping.generatedLine === nextMapping.generatedLine) {\n          mapping.lastGeneratedColumn = nextMapping.generatedColumn - 1;\n          continue;\n        }\n      }\n\n      // The last mapping for each line spans the entire line.\n      mapping.lastGeneratedColumn = Infinity;\n    }\n  };\n\n/**\n * Returns the original source, line, and column information for the generated\n * source's line and column positions provided. The only argument is an object\n * with the following properties:\n *\n *   - line: The line number in the generated source.\n *   - column: The column number in the generated source.\n *   - bias: Either 'SourceMapConsumer.GREATEST_LOWER_BOUND' or\n *     'SourceMapConsumer.LEAST_UPPER_BOUND'. Specifies whether to return the\n *     closest element that is smaller than or greater than the one we are\n *     searching for, respectively, if the exact element cannot be found.\n *     Defaults to 'SourceMapConsumer.GREATEST_LOWER_BOUND'.\n *\n * and an object is returned with the following properties:\n *\n *   - source: The original source file, or null.\n *   - line: The line number in the original source, or null.\n *   - column: The column number in the original source, or null.\n *   - name: The original identifier, or null.\n */\nBasicSourceMapConsumer.prototype.originalPositionFor =\n  function SourceMapConsumer_originalPositionFor(aArgs) {\n    var needle = {\n      generatedLine: util.getArg(aArgs, 'line'),\n      generatedColumn: util.getArg(aArgs, 'column')\n    };\n\n    var index = this._findMapping(\n      needle,\n      this._generatedMappings,\n      \"generatedLine\",\n      \"generatedColumn\",\n      util.compareByGeneratedPositionsDeflated,\n      util.getArg(aArgs, 'bias', SourceMapConsumer.GREATEST_LOWER_BOUND)\n    );\n\n    if (index >= 0) {\n      var mapping = this._generatedMappings[index];\n\n      if (mapping.generatedLine === needle.generatedLine) {\n        var source = util.getArg(mapping, 'source', null);\n        if (source !== null) {\n          source = this._sources.at(source);\n          if (this.sourceRoot != null) {\n            source = util.join(this.sourceRoot, source);\n          }\n        }\n        var name = util.getArg(mapping, 'name', null);\n        if (name !== null) {\n          name = this._names.at(name);\n        }\n        return {\n          source: source,\n          line: util.getArg(mapping, 'originalLine', null),\n          column: util.getArg(mapping, 'originalColumn', null),\n          name: name\n        };\n      }\n    }\n\n    return {\n      source: null,\n      line: null,\n      column: null,\n      name: null\n    };\n  };\n\n/**\n * Return true if we have the source content for every source in the source\n * map, false otherwise.\n */\nBasicSourceMapConsumer.prototype.hasContentsOfAllSources =\n  function BasicSourceMapConsumer_hasContentsOfAllSources() {\n    if (!this.sourcesContent) {\n      return false;\n    }\n    return this.sourcesContent.length >= this._sources.size() &&\n      !this.sourcesContent.some(function (sc) { return sc == null; });\n  };\n\n/**\n * Returns the original source content. The only argument is the url of the\n * original source file. Returns null if no original source content is\n * available.\n */\nBasicSourceMapConsumer.prototype.sourceContentFor =\n  function SourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {\n    if (!this.sourcesContent) {\n      return null;\n    }\n\n    if (this.sourceRoot != null) {\n      aSource = util.relative(this.sourceRoot, aSource);\n    }\n\n    if (this._sources.has(aSource)) {\n      return this.sourcesContent[this._sources.indexOf(aSource)];\n    }\n\n    var url;\n    if (this.sourceRoot != null\n        && (url = util.urlParse(this.sourceRoot))) {\n      // XXX: file:// URIs and absolute paths lead to unexpected behavior for\n      // many users. We can help them out when they expect file:// URIs to\n      // behave like it would if they were running a local HTTP server. See\n      // https://bugzilla.mozilla.org/show_bug.cgi?id=885597.\n      var fileUriAbsPath = aSource.replace(/^file:\\/\\//, \"\");\n      if (url.scheme == \"file\"\n          && this._sources.has(fileUriAbsPath)) {\n        return this.sourcesContent[this._sources.indexOf(fileUriAbsPath)]\n      }\n\n      if ((!url.path || url.path == \"/\")\n          && this._sources.has(\"/\" + aSource)) {\n        return this.sourcesContent[this._sources.indexOf(\"/\" + aSource)];\n      }\n    }\n\n    // This function is used recursively from\n    // IndexedSourceMapConsumer.prototype.sourceContentFor. In that case, we\n    // don't want to throw if we can't find the source - we just want to\n    // return null, so we provide a flag to exit gracefully.\n    if (nullOnMissing) {\n      return null;\n    }\n    else {\n      throw new Error('\"' + aSource + '\" is not in the SourceMap.');\n    }\n  };\n\n/**\n * Returns the generated line and column information for the original source,\n * line, and column positions provided. The only argument is an object with\n * the following properties:\n *\n *   - source: The filename of the original source.\n *   - line: The line number in the original source.\n *   - column: The column number in the original source.\n *   - bias: Either 'SourceMapConsumer.GREATEST_LOWER_BOUND' or\n *     'SourceMapConsumer.LEAST_UPPER_BOUND'. Specifies whether to return the\n *     closest element that is smaller than or greater than the one we are\n *     searching for, respectively, if the exact element cannot be found.\n *     Defaults to 'SourceMapConsumer.GREATEST_LOWER_BOUND'.\n *\n * and an object is returned with the following properties:\n *\n *   - line: The line number in the generated source, or null.\n *   - column: The column number in the generated source, or null.\n */\nBasicSourceMapConsumer.prototype.generatedPositionFor =\n  function SourceMapConsumer_generatedPositionFor(aArgs) {\n    var source = util.getArg(aArgs, 'source');\n    if (this.sourceRoot != null) {\n      source = util.relative(this.sourceRoot, source);\n    }\n    if (!this._sources.has(source)) {\n      return {\n        line: null,\n        column: null,\n        lastColumn: null\n      };\n    }\n    source = this._sources.indexOf(source);\n\n    var needle = {\n      source: source,\n      originalLine: util.getArg(aArgs, 'line'),\n      originalColumn: util.getArg(aArgs, 'column')\n    };\n\n    var index = this._findMapping(\n      needle,\n      this._originalMappings,\n      \"originalLine\",\n      \"originalColumn\",\n      util.compareByOriginalPositions,\n      util.getArg(aArgs, 'bias', SourceMapConsumer.GREATEST_LOWER_BOUND)\n    );\n\n    if (index >= 0) {\n      var mapping = this._originalMappings[index];\n\n      if (mapping.source === needle.source) {\n        return {\n          line: util.getArg(mapping, 'generatedLine', null),\n          column: util.getArg(mapping, 'generatedColumn', null),\n          lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)\n        };\n      }\n    }\n\n    return {\n      line: null,\n      column: null,\n      lastColumn: null\n    };\n  };\n\nexports.BasicSourceMapConsumer = BasicSourceMapConsumer;\n\n/**\n * An IndexedSourceMapConsumer instance represents a parsed source map which\n * we can query for information. It differs from BasicSourceMapConsumer in\n * that it takes \"indexed\" source maps (i.e. ones with a \"sections\" field) as\n * input.\n *\n * The only parameter is a raw source map (either as a JSON string, or already\n * parsed to an object). According to the spec for indexed source maps, they\n * have the following attributes:\n *\n *   - version: Which version of the source map spec this map is following.\n *   - file: Optional. The generated file this source map is associated with.\n *   - sections: A list of section definitions.\n *\n * Each value under the \"sections\" field has two fields:\n *   - offset: The offset into the original specified at which this section\n *       begins to apply, defined as an object with a \"line\" and \"column\"\n *       field.\n *   - map: A source map definition. This source map could also be indexed,\n *       but doesn't have to be.\n *\n * Instead of the \"map\" field, it's also possible to have a \"url\" field\n * specifying a URL to retrieve a source map from, but that's currently\n * unsupported.\n *\n * Here's an example source map, taken from the source map spec[0], but\n * modified to omit a section which uses the \"url\" field.\n *\n *  {\n *    version : 3,\n *    file: \"app.js\",\n *    sections: [{\n *      offset: {line:100, column:10},\n *      map: {\n *        version : 3,\n *        file: \"section.js\",\n *        sources: [\"foo.js\", \"bar.js\"],\n *        names: [\"src\", \"maps\", \"are\", \"fun\"],\n *        mappings: \"AAAA,E;;ABCDE;\"\n *      }\n *    }],\n *  }\n *\n * [0]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit#heading=h.535es3xeprgt\n */\nfunction IndexedSourceMapConsumer(aSourceMap) {\n  var sourceMap = aSourceMap;\n  if (typeof aSourceMap === 'string') {\n    sourceMap = JSON.parse(aSourceMap.replace(/^\\)\\]\\}'/, ''));\n  }\n\n  var version = util.getArg(sourceMap, 'version');\n  var sections = util.getArg(sourceMap, 'sections');\n\n  if (version != this._version) {\n    throw new Error('Unsupported version: ' + version);\n  }\n\n  this._sources = new ArraySet();\n  this._names = new ArraySet();\n\n  var lastOffset = {\n    line: -1,\n    column: 0\n  };\n  this._sections = sections.map(function (s) {\n    if (s.url) {\n      // The url field will require support for asynchronicity.\n      // See https://github.com/mozilla/source-map/issues/16\n      throw new Error('Support for url field in sections not implemented.');\n    }\n    var offset = util.getArg(s, 'offset');\n    var offsetLine = util.getArg(offset, 'line');\n    var offsetColumn = util.getArg(offset, 'column');\n\n    if (offsetLine < lastOffset.line ||\n        (offsetLine === lastOffset.line && offsetColumn < lastOffset.column)) {\n      throw new Error('Section offsets must be ordered and non-overlapping.');\n    }\n    lastOffset = offset;\n\n    return {\n      generatedOffset: {\n        // The offset fields are 0-based, but we use 1-based indices when\n        // encoding/decoding from VLQ.\n        generatedLine: offsetLine + 1,\n        generatedColumn: offsetColumn + 1\n      },\n      consumer: new SourceMapConsumer(util.getArg(s, 'map'))\n    }\n  });\n}\n\nIndexedSourceMapConsumer.prototype = Object.create(SourceMapConsumer.prototype);\nIndexedSourceMapConsumer.prototype.constructor = SourceMapConsumer;\n\n/**\n * The version of the source mapping spec that we are consuming.\n */\nIndexedSourceMapConsumer.prototype._version = 3;\n\n/**\n * The list of original sources.\n */\nObject.defineProperty(IndexedSourceMapConsumer.prototype, 'sources', {\n  get: function () {\n    var sources = [];\n    for (var i = 0; i < this._sections.length; i++) {\n      for (var j = 0; j < this._sections[i].consumer.sources.length; j++) {\n        sources.push(this._sections[i].consumer.sources[j]);\n      }\n    }\n    return sources;\n  }\n});\n\n/**\n * Returns the original source, line, and column information for the generated\n * source's line and column positions provided. The only argument is an object\n * with the following properties:\n *\n *   - line: The line number in the generated source.\n *   - column: The column number in the generated source.\n *\n * and an object is returned with the following properties:\n *\n *   - source: The original source file, or null.\n *   - line: The line number in the original source, or null.\n *   - column: The column number in the original source, or null.\n *   - name: The original identifier, or null.\n */\nIndexedSourceMapConsumer.prototype.originalPositionFor =\n  function IndexedSourceMapConsumer_originalPositionFor(aArgs) {\n    var needle = {\n      generatedLine: util.getArg(aArgs, 'line'),\n      generatedColumn: util.getArg(aArgs, 'column')\n    };\n\n    // Find the section containing the generated position we're trying to map\n    // to an original position.\n    var sectionIndex = binarySearch.search(needle, this._sections,\n      function(needle, section) {\n        var cmp = needle.generatedLine - section.generatedOffset.generatedLine;\n        if (cmp) {\n          return cmp;\n        }\n\n        return (needle.generatedColumn -\n                section.generatedOffset.generatedColumn);\n      });\n    var section = this._sections[sectionIndex];\n\n    if (!section) {\n      return {\n        source: null,\n        line: null,\n        column: null,\n        name: null\n      };\n    }\n\n    return section.consumer.originalPositionFor({\n      line: needle.generatedLine -\n        (section.generatedOffset.generatedLine - 1),\n      column: needle.generatedColumn -\n        (section.generatedOffset.generatedLine === needle.generatedLine\n         ? section.generatedOffset.generatedColumn - 1\n         : 0),\n      bias: aArgs.bias\n    });\n  };\n\n/**\n * Return true if we have the source content for every source in the source\n * map, false otherwise.\n */\nIndexedSourceMapConsumer.prototype.hasContentsOfAllSources =\n  function IndexedSourceMapConsumer_hasContentsOfAllSources() {\n    return this._sections.every(function (s) {\n      return s.consumer.hasContentsOfAllSources();\n    });\n  };\n\n/**\n * Returns the original source content. The only argument is the url of the\n * original source file. Returns null if no original source content is\n * available.\n */\nIndexedSourceMapConsumer.prototype.sourceContentFor =\n  function IndexedSourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {\n    for (var i = 0; i < this._sections.length; i++) {\n      var section = this._sections[i];\n\n      var content = section.consumer.sourceContentFor(aSource, true);\n      if (content) {\n        return content;\n      }\n    }\n    if (nullOnMissing) {\n      return null;\n    }\n    else {\n      throw new Error('\"' + aSource + '\" is not in the SourceMap.');\n    }\n  };\n\n/**\n * Returns the generated line and column information for the original source,\n * line, and column positions provided. The only argument is an object with\n * the following properties:\n *\n *   - source: The filename of the original source.\n *   - line: The line number in the original source.\n *   - column: The column number in the original source.\n *\n * and an object is returned with the following properties:\n *\n *   - line: The line number in the generated source, or null.\n *   - column: The column number in the generated source, or null.\n */\nIndexedSourceMapConsumer.prototype.generatedPositionFor =\n  function IndexedSourceMapConsumer_generatedPositionFor(aArgs) {\n    for (var i = 0; i < this._sections.length; i++) {\n      var section = this._sections[i];\n\n      // Only consider this section if the requested source is in the list of\n      // sources of the consumer.\n      if (section.consumer.sources.indexOf(util.getArg(aArgs, 'source')) === -1) {\n        continue;\n      }\n      var generatedPosition = section.consumer.generatedPositionFor(aArgs);\n      if (generatedPosition) {\n        var ret = {\n          line: generatedPosition.line +\n            (section.generatedOffset.generatedLine - 1),\n          column: generatedPosition.column +\n            (section.generatedOffset.generatedLine === generatedPosition.line\n             ? section.generatedOffset.generatedColumn - 1\n             : 0)\n        };\n        return ret;\n      }\n    }\n\n    return {\n      line: null,\n      column: null\n    };\n  };\n\n/**\n * Parse the mappings in a string in to a data structure which we can easily\n * query (the ordered arrays in the `this.__generatedMappings` and\n * `this.__originalMappings` properties).\n */\nIndexedSourceMapConsumer.prototype._parseMappings =\n  function IndexedSourceMapConsumer_parseMappings(aStr, aSourceRoot) {\n    this.__generatedMappings = [];\n    this.__originalMappings = [];\n    for (var i = 0; i < this._sections.length; i++) {\n      var section = this._sections[i];\n      var sectionMappings = section.consumer._generatedMappings;\n      for (var j = 0; j < sectionMappings.length; j++) {\n        var mapping = sectionMappings[j];\n\n        var source = section.consumer._sources.at(mapping.source);\n        if (section.consumer.sourceRoot !== null) {\n          source = util.join(section.consumer.sourceRoot, source);\n        }\n        this._sources.add(source);\n        source = this._sources.indexOf(source);\n\n        var name = section.consumer._names.at(mapping.name);\n        this._names.add(name);\n        name = this._names.indexOf(name);\n\n        // The mappings coming from the consumer for the section have\n        // generated positions relative to the start of the section, so we\n        // need to offset them to be relative to the start of the concatenated\n        // generated file.\n        var adjustedMapping = {\n          source: source,\n          generatedLine: mapping.generatedLine +\n            (section.generatedOffset.generatedLine - 1),\n          generatedColumn: mapping.generatedColumn +\n            (section.generatedOffset.generatedLine === mapping.generatedLine\n            ? section.generatedOffset.generatedColumn - 1\n            : 0),\n          originalLine: mapping.originalLine,\n          originalColumn: mapping.originalColumn,\n          name: name\n        };\n\n        this.__generatedMappings.push(adjustedMapping);\n        if (typeof adjustedMapping.originalLine === 'number') {\n          this.__originalMappings.push(adjustedMapping);\n        }\n      }\n    }\n\n    quickSort(this.__generatedMappings, util.compareByGeneratedPositionsDeflated);\n    quickSort(this.__originalMappings, util.compareByOriginalPositions);\n  };\n\nexports.IndexedSourceMapConsumer = IndexedSourceMapConsumer;\n"],"names":["util","binarySearch","ArraySet","base64VLQ","quickSort","SourceMapConsumer","aSourceMap","sourceMap","JSON","parse","replace","sections","IndexedSourceMapConsumer","BasicSourceMapConsumer","version","getArg","sources","names","sourceRoot","sourcesContent","mappings","file","this","_version","Error","map","String","normalize","source","isAbsolute","relative","_names","fromArray","_sources","_mappings","Mapping","generatedLine","generatedColumn","originalLine","originalColumn","name","lastOffset","line","column","_sections","s","url","offset","offsetLine","offsetColumn","generatedOffset","consumer","fromSourceMap","prototype","__generatedMappings","Object","defineProperty","get","_parseMappings","__originalMappings","_charIsMappingSeparator","aStr","index","c","charAt","aSourceRoot","GENERATED_ORDER","ORIGINAL_ORDER","GREATEST_LOWER_BOUND","LEAST_UPPER_BOUND","eachMapping","aCallback","aContext","aOrder","context","_generatedMappings","_originalMappings","mapping","at","join","forEach","allGeneratedPositionsFor","aArgs","needle","has","indexOf","_findMapping","compareByOriginalPositions","undefined","push","lastColumn","exports","create","smc","toArray","_sourceRoot","_generateSourcesContent","_file","generatedMappings","slice","destGeneratedMappings","destOriginalMappings","i","length","srcMapping","destMapping","str","segment","end","value","previousGeneratedColumn","previousOriginalLine","previousOriginalColumn","previousSource","previousName","cachedSegments","temp","originalMappings","decode","rest","compareByGeneratedPositionsDeflated","aNeedle","aMappings","aLineName","aColumnName","aComparator","aBias","TypeError","search","computeColumnSpans","nextMapping","lastGeneratedColumn","Infinity","originalPositionFor","hasContentsOfAllSources","size","some","sc","sourceContentFor","aSource","nullOnMissing","urlParse","fileUriAbsPath","scheme","path","generatedPositionFor","constructor","j","sectionIndex","section","cmp","bias","every","content","generatedPosition","sectionMappings","add","adjustedMapping"],"sourceRoot":""}